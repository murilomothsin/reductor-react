{"version":3,"sources":["Components/Home/index.js","Components/Hot/index.js","Components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","url","result","errors","handleChange","e","preventDefault","_this","setState","Object","objectSpread","target","value","submit","axios","post","short","then","response","data","catch","error","printErrors","react_default","a","createElement","className","map","key","onSubmit","this","href","rel","placeholder","onChange","type","Component","Hot","shorts","getShortList","get","root_url","shortsList","id","click_count","page_title","slice","concat","url_digest","About","align","App","react_router_dom","to","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c358a956.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\n\nclass Home extends Component {\n  state = {\n    url: '',\n    result: '',\n    errors: []\n  }\n\n  handleChange = (e) => {\n    e.preventDefault();\n    this.setState({...this.state, url: e.target.value})\n  }\n\n  submit = (e) => {\n    e.preventDefault();\n    axios.post('http://localhost:3000/shorts', {short: this.state})\n      .then((response) => {\n        this.setState({...this.state, result: response.data.url});\n      })\n      .catch((error) => {\n        this.setState({...this.state, errors: error.response.data.errors});\n      });\n  }\n\n  printErrors = () => (\n    <ul className=\"errors\">\n      {this.state.errors.map((error) => (\n        <li key={error}>{error}</li>\n      ))}\n    </ul>\n  )\n\n  render() {\n    return (\n      <form onSubmit={this.submit}>\n        <h2>Insert your URL:</h2>\n        { this.state.result ? (\n          <div>\n            <h3>Congratulations... Take your link:</h3>\n            <a href={this.state.result} target=\"_blank\" rel=\"noopener noreferrer\">{this.state.result}</a>\n          </div>\n        ) : (\n          <div>\n            <input\n              placeholder=\"Insert your URL...\"\n              value={this.state.url}\n              onChange={this.handleChange}\n            />\n            {this.printErrors()}\n            <button type=\"submit\" >Insert</button>\n          </div>\n        )}\n        \n      </form>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nimport axios from 'axios';\n\n\nclass Hot extends Component {\n  state = {\n    shorts: []\n  }\n\n  componentDidMount() {\n    this.getShortList()\n  }\n\n  getShortList = () => {\n    axios.get('http://localhost:3000/shorts')\n      .then((response) => {\n        this.setState({...this.state, shorts: response.data.shorts, root_url: response.data.root_url});\n      })\n      .catch((error) => {\n        this.setState({...this.state, errors: error.response.data.errors});\n      });\n  }\n\n  shortsList = () => (\n    this.state.shorts.map((short) => (\n      <tr key={short.id}>\n        <td>{short.click_count}</td>\n        <td className=\"tooltip\"><span className=\"tooltiptext\">{short.page_title}</span>{short.page_title.slice(0, 37)}</td>\n        <td><a href={`${this.state.root_url}${short.url_digest}`} target=\"_blank\" rel=\"noopener noreferrer\">{short.url}</a></td>\n      </tr>\n    ))\n  )\n\n\n  render() {\n    return (\n      <div>\n        <h2>Top 100 links</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Click Count</th>\n              <th>Title</th>\n              <th>URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.shortsList()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Hot;\n","import React from 'react';\n\n\nfunction About() {\n  return (\n    <div align=\"center\">\n      <h2>About Reductor</h2>\n\n      <p>\n        Project developed by <a href=\"https://www.linkedin.com/in/murilomothsin/\" target=\"_blank\" rel=\"noopener noreferrer\" >Murilo Mothsin</a> for learning porpuses!\n      </p>\n\n      <p>\n        Code available at <a href=\"https://github.com/murilomothsin/reductor-react/\" target=\"_blank\" rel=\"noopener noreferrer\" >Github</a>\n      </p>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Home from './Components/Home'\nimport Hot from './Components/Hot'\nimport About from './Components/About'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar\">\n          <div>\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div>\n            <Link to=\"/hot/\">Top 100</Link>\n          </div>\n          <div>\n            <Link to=\"/about/\">About</Link>\n          </div>\n        </nav>\n        <div className=\"container\">\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about/\" component={About} />\n          <Route path=\"/hot/\" component={Hot} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}